import TruffautSupport

let layerHosting = """
/* Layer Backed View */
view.wantsLayer = true
// this view is now a layer-backed view
// the layer hierarchy is considered private and
// should NEVER be modified (add or remove sublayers)

/* Layer Hosting View */
view.layer = CALayer()
view.wantsLayer = true
// this view is now a layer-hosting view
// the layer can be modified as you want
// but the z-index for subviews may not
// be deterministic
"""

let get_api = """
var major: UInt16 = 0
var minor: UInt16 = 0
var micro: UInt16 = 0
UCDGetUnicodeVersion(&major, &minor, &micro)
"""

let copy_api = """
let graphemeCluster = UCDStringCopyGraphemeClusterAtIndex(ucdString, index)
// do something with graphemeCluster
UCDGraphemeClusterRelease(graphemeCluster)
"""

let swift_api = """
// Generated by Xcode for Swift 4.2
public func UCDScalarCopyNameAliasesOfType(_ scalar: UCDScalarRef,
                                           _ type: UCDNameAliasType) -> UCDNameArrayRef?
"""

let functor = """
// APIs
UCD_EXPORT char * UCDPlaneCopyName(UCDPlaneRef plane, size_t * outLength);
UCD_EXPORT char * UCDBlockCopyName(UCDBlockRef block, size_t * outLength);
UCD_EXPORT char * UCD_NULLABLE UCDScalarCopyName(UCDScalarRef scalar, size_t * outLength);
UCD_EXPORT char * UCD_NULLABLE UCDScalarCopyCharacter(UCDScalarRef scalar, size_t * outLength);

// Swift API call
var nameByteLength = 0
let nameBytes = UCDBlockCopyName(ucdBlock, &nameByteLength)
name = String(bytes: nameBytes, length: nameByteLength, encoding: .utf8)!
UCDCStringRelease(nameBytes)

// Short-hand wrappers

typedef char *(*UCDCopyStringFunctor)(void *, size_t *);

NSString * UNCCopyStringValue(void *ucdObject, UCDCopyStringFunctor func)
{
    size_t byteSize;
    char *cString = (*func)(ucdObject, &byteSize);
    if (cString)
    {
        NSString *string = [[NSString alloc] initWithBytes:cString
                                                    length:byteSize
                                                  encoding:NSUTF8StringEncoding];
        UCDCStringRelease(cString);
        return string;
    }
    else
    {
        return @"";
    }
}

// Usages
NSString *name = UNCCopyStringValue(ucdPlane, (UCDCopyStringFunctor) UCDPlaneCopyName);
NSString *name = UNCCopyStringValue(ucdBlock, (UCDCopyStringFunctor) UCDBlockCopyName);
NSString *name = UNCCopyStringValue(_scalar, (UCDCopyStringFunctor) UCDScalarCopyName);
NSString *chr = UNCCopyStringValue(_scalar, (UCDCopyStringFunctor) UCDScalarCopyCharacter);
"""

let presentation = Presentation(pages: [

  Page(title: "Building Cicero for iOS and macOS"),

  Page(title: "More About Cicero", contents: [
    .text("Cicero is a tool for checking the Unicode Character Database (UCD)"),
    .text("The iOS version was released on June, 2018"),
    .text("The macOS version is in-progress"),
    .text("Some of users are from Apple and The Unicode Consortium"),
  ]),

  Page(contents: [
    .image("images/arch.png"),
  ]),

  Page(title: "UX Design", subtitle: "From sketches to Sketch.app"),

  Page(title: "UX Design Goals", contents: [
    .text("Be authentic"),
    .indent([
      .text("Keep UIKit/AppKit look and feel as much as possible"),
      .text("Use latest OS features if relevent"),
      .text("When in doubt: what will Apple do?"),
    ]),
    .text("Design as if it's coding (also coding as if it's design)"),
  ]),

  Page(title: "Sketches", contents: [
    .image("images/sketch-1.png"),
    .image("images/sketch-2.pdf"),
    .image("images/sketch-3.pdf"),
    .image("images/sketch-4.pdf"),
    .image("images/sketch-5.png"),
  ]),

  Page(contents: [
    .image("images/sketch-icon.tiff"),
    .text("[[SketchApp sharedApp] createSketchWithSketches:sketches];"),
    .text("// NSArray *array = [NSArray arrayWithArray:anotherArray];"),
  ]),

  Page(title: "What I've learnt", contents: [
    .text("It's very helpful to draw with hand before start using any advanced tools"),
    .text("Apple's iOS UI library and macOS UI library is useful, but it's not flexible enough"),
    .text("Sketch preview is fun, but too time consuming (coding could be faster)"),
  ]),

  Page(title: "import Cocoa", subtitle: "The Cocoa before Cocoa Touch"),

  Page(title: "The Darwin Platform", contents: [
      .text("NeXTSTEP -> Mac OS X (macOS) -> iOS -> watchOS/tvOS"),
      .text("Carbon -> Cocoa -> Cocoa Touch"),
      .text("C -> Objective-C/Swift"),
      .text("Project Builder/Interface Builder -> Xcode"),
      .indent([
        .sourceCode(.plainText, "*.xcodeproj/project.pbxproj"),
        .sourceCode(.plainText, "*.nib")
      ]),
  ]),

  Page(title: "AppKit", subtitle: "The Application Layer"),

  Page(title: "NSView", contents: [
      .text("A Reversed Coordinates"),
      .indent([
        .sourceCode(.swift, "CGPoint.zero // lower left corner"),
        .sourceCode(.swift, "override var isFlipped: Bool { return true } // now it's the same as iOS"),
      ]),

      .text("Layer is Optional (added in macOS 10.5)"),
      .indent([
        .sourceCode(.swift, layerHosting),
      ]),

      .text("Changing Background Color"),
      .indent([
        .sourceCode(.swift, "override func draw(_ dirtyRect: NSRect) { ... }"),
        .sourceCode(.swift, "view.layer?.backgroundColor = NSColor.red.cgColor"),
      ]),
  ]),

  Page(title: "NSScrollView", contents: [
      .sourceCode(.swift, "scrollView: NSScrollView"),
      .indent([
        .sourceCode(.swift, "contentView: NSClipView"),
        .sourceCode(.swift, "documentView: NSView"),
      ]),
      .text("Scrolling is achieved by changing documentView's bounds"),
      .text("Starts from the lower left corner"),
      .text("Elastic scrolling is added in macOS 10.9"),
  ]),

  Page(title: "NSTableView/NSCollectionView", contents: [
      .text("NSTableView"),
      .indent([
        .text("2 dimension list (row and column)"),
        .text("NSOutlineView"),
        .text("View-based API"),
        .text("Legacy API: NSCell-based table view"),
      ]),
      .text("NSCollectionView"),
      .indent([
        .text("Before macOS 10.11, cell is not reused"),
        .text("After that, basically the same as UICollectionView"),
        .text("Except NSCollectionViewItem is a subclass of NSViewController"),
      ]),
  ]),

  Page(title: "NSViewController", contents: [
      .text("Before macOS 10.10:"),
      .indent([
        .text("No view lifecycle management"),
        .text("Not part of the responder chain"),
      ]),
      .text("After macOS 10.10:"),
      .indent([
        .text("Basically the same as UIViewController")
      ]),
  ]),

  Page(title: "NSWindow/NSWindowController", contents: [
      .text("An extra layer above view/view controllers comparing to iOS"),
      .text("An application can have as many windows as needed"),
      .text("Action sheets and alerts are presented as windows"),
      .text("WindowServer")
  ]),

  Page(title: "NSToolbar/NSTouchBar", contents: [
      .text("Unique to macOS, no equivalent on iOS"),
      .text("Context-aware"),
  ]),

  Page(title: "Main Menu", contents: [
      .text("Context-aware among applications"),
      .text("Menu item's action is dynamically dispatched"),
      .indent([
        .sourceCode(.swift, "FirstResponder.responds(to: menuItemAction)"),
      ]),
  ]),

  Page(title: "Code Sharing", subtitle: "iOS/macOS and beyond"),

  Page(title: "View Controllers", contents: [
    .text("Sharable in some way"),
    .text("Depends on your application flow"),
  ]),

  Page(title: "NSView and UIView", contents: [
    .text("The views themselves are incompatible"),
    .text("But the underlying frameworks are shared:"),
    .indent([
      .text("CoreGraphics"),
      .text("CoreAnimation"),
      .text("CoreText"),
    ]),
    .text("Some types are nearly direct map:"),
    .indent([
      .text("NSRect and CGRect"),
      .text("NSFont and UIFont"),
      .text("NSColor and UIColor"),
    ]),
  ]),

  Page(title: "Sharing a Rust library", contents: [
      .text("CoreFoundation style C APIs"),
      .indent([
        .text("Opaque pointers"),
        .indent([
          .sourceCode(.c, "typedef struct UCDGraphemeCluster * UCDGraphemeClusterRef;"),
        ]),
        .text("If you use a Get function, you cannot be certain of the returned objectâ€™s life span"),
        .indent([
          .sourceCode(.c, get_api),
        ]),
        .text("If you use a Copy or Create function, you are responsible for releasing the object"),
        .indent([
          .sourceCode(.c, copy_api),
        ]),
      ]),
      .text("Hand tweaked for better Swift interoperability"),
      .indent([
        .sourceCode(.swift, swift_api),
      ]),
  ]),

  Page(title: "Sharing libucd with other platforms", contents: [
    .text("libucd CI is running on Linux"),
    .text("libucd tests are passing on Windows"),
    .text("A thin C++ wrapper will make it very easy to use"),
  ]),

  Page(title: "Subjective-Swift", subtitle: "My thoughts"),

  Page(title: "Cocoa is built for(with) Objective-C", contents: [
    .text("Target-Action"),
    .text("Delegate"),
    .text("Responder Chain"),
    .text("NSCoding"),
    .text("NSBundle"),
    .text("Cocoa Bindings (KVO)"),
  ]),

  Page(title: "Objective-C is still C (iPad Pro is still an iPad)", contents: [
    .text("Simple"),
    .text("Stable"),
    .text("A lot of sharp edges"),
    .text("A lot of C tricks works well"),
    .indent([
      .sourceCode(.c, functor),
    ]),
  ]),

  Page(title: "Swift has some nice modern features", contents: [
    .text("Optional"),
    .text("Enums with associated values"),
    .text("Protocol default implementations"),
    .text("Guard"),
  ]),

  Page(title: "But its complexity sometimes doesn't payoff", contents: [
    .text("Safer(?) than Objective-C, but not as safe as Rust (compile-time memory safety)"),
    .text("Generics, protocol-oriented programming concentrated too much language features"),
    .text("but not as useful as C++ templates or Rust macros"),
  ]),

  Page(contents: [
    .image("images/arch.png"),
  ]),

  Page(title: "Thank you!", subtitle: "codezerker.co.nz"),

])
